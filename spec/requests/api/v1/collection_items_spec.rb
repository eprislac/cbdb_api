require 'rails_helper'
require 'pry'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/:email/collection/:collection_id/items", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Copy. As you add validations to Copy, be sure to
  # adjust the attributes here as well.

  let(:user) { create(:user, name: Faker::Name.name) }
  let(:condition) { create(:condition, name: "Near Mint") }
  let(:collection) { create(:collection, user: user, name: 'New Collection') }
  let(:publication_type) { create(:publication_type, name: "Comic Book") }
  let(:publisher) { create(:publisher, name: "Marvel Comics") }
  let(:publication) { create(:publication, title: "Amazing Spider-Man", publication_type_id: publication_type.id, publisher_id: publisher.id) }
  let(:issue) { create(:issue, number: 1, publication_id: publication.id) }
  let(:cover) { create(:cover, variant: "Regular", issue_id: issue.id) }
  let(:valid_attributes) {
    {
      issue_id: issue.id,
      collection_id: collection.id,
      cover_id: cover.id,
      condition_id: condition.id,
      notes: "Creased cover, spine bends, white pages"
    }
  }

  let(:invalid_attributes) {
    {
      issue_id: nil,
      cover_id: nil,
      collection_id: collection.id,
      condition_id: nil,
      email: ''
    }
  }

  before(:each) do
    allow_any_instance_of(Api::V1::CollectionItemsController)
      .to receive(:email).and_return(user.email)
    allow_any_instance_of(Api::V1::CollectionItemsController)
      .to receive(:user).and_return(user)
    allow_any_instance_of(Api::V1::CollectionItemsController)
      .to receive(:collection_id).and_return(collection.id)
    allow_any_instance_of(User)
      .to receive(:collections).and_return(user.collections)
    allow(Collection).to receive(:find).and_return(collection)
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CopiesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    let!(:copy) { create(:copy, valid_attributes) }
    it "renders a successful response" do
      get api_v1_collection_items_url(
        email: 'x',
        collection_id: 'x'
      ), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    let!(:copy) { create(:copy, valid_attributes) }
    it "renders a successful response" do
      get api_v1_collection_items_url(email: 'x', collection_id: 'x', id: copy.id), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Copy" do
        expect {
          post api_v1_collection_items_url(email: 'x', collection_id: 'x'),
               params: { collection_item: valid_attributes },
               headers: valid_headers,
               as: :json
        }.to change(collection.copies, :count).by(1)
      end

      it "renders a JSON response with the new copy" do
        post api_v1_collection_items_url(email: 'x', collection_id: 'x'),
      params: { collection_item: { email: 'x', collection_id: 'x' }.merge(valid_attributes) },
             headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type)
          .to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Copy" do
        expect {
          post api_v1_collection_items_url(email: 'x', collection_id: 'x'),
               params: { collection_item: invalid_attributes }, as: :json
        }.to change(collection.copies, :count).by(0)
      end

      it "renders a JSON response with errors for the new copy" do
        post api_v1_collection_items_url(email: 'x', collection_id: 'x'),
             params: { collection_item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_content)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_condition) { create(:condition, name: "Very Fine") }
      let(:new_attributes) {
        {
          id: copy.id, condition_id: new_condition.id, notes: "Updated notes"
        }
      }

      let!(:copy) { create(:copy, valid_attributes) }

      it "updates the requested copy" do
        patch api_v1_update_collection_item_url(email: 'x', collection_id: 'x', id: copy.id),
              params: { collection_item: new_attributes },
              headers: valid_headers, as: :json
        new_copy = (response.parsed_body)
        expect(new_copy[:condition_id]).to eq(new_condition.id)
        expect(new_copy[:notes]).to eq("Updated notes")
      end


      it "renders a JSON response with the copy" do
        patch api_v1_update_collection_item_url(email: 'x', collection_id: 'x', id: copy.id),
              params: { collection_item: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      let!(:copy) { create(:copy, valid_attributes) }
      it "renders a JSON response with errors for the copy" do
        patch api_v1_update_collection_item_url(email: 'x', collection_id: 'x', id: copy.id),
              params: { collection_item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_content)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:copy) { create(:copy, valid_attributes) }
    it "destroys the requested copy" do
      expect {
        delete api_v1_collection_item_url(email: 'x', collection_id: 'x', id: copy.id), headers: valid_headers, as: :json
      }.to change(collection.copies, :count).by(-1)
    end
  end
end
