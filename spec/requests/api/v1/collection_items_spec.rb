require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/:email/collection/:collection_id/items", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Copy. As you add validations to Copy, be sure to
  # adjust the attributes here as well.
  let(:condition) { create!(:condition, name: "Near Mint") }
  let(:collection) { create!(:collection, name: "Near Mint") }
  let(:publication_type) { create!(:publication_type, name: "Comic Book") }
  let(:publisher) { create!(:publisher, name: "Marvel Comics") }
  let(:publication) { create!(:publication, title: "Amazing Spider-Man", publication_type_id: publication_type.id, publisher_id: publisher.id) }
  let(:issue) { create!(:issue, number: 1, publication_id: publication.id) }

  let(:valid_attributes) {
    {
      issue_id: issue.id,
      collection_id: collection.id,
      condition_id: condition.id,
      notes: "Creased cover, spine bends, white pages" }
  }

  let(:invalid_attributes) {
  { issue_id: nil, collection_id: nil, condition_id: nil }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CopiesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Copy.create! valid_attributes
      get api_v1_collection_items_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      copy = Copy.create! valid_attributes
      get api_v1_collection_items_url(copy), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Copy" do
        expect {
          post api_v1_collection_items_url,
               params: { copy: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Copy, :count).by(1)
      end

      it "renders a JSON response with the new copy" do
        post api_v1_collection_items_url,
             params: { copy: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Copy" do
        expect {
          post api_v1_collection_items_url,
               params: { copy: invalid_attributes }, as: :json
        }.to change(Copy, :count).by(0)
      end

      it "renders a JSON response with errors for the new copy" do
        post api_v1_collection_items_url,
             params: { copy: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_content)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_condition) { Condition.create!(name: "Very Fine") }
      let(:new_attributes) {
        { condition_id: new_condition.id, notes: "Updated notes" }
      }

      it "updates the requested copy" do
        copy = Copy.create! valid_attributes
        patch api_v1_collection_items_url(copy),
              params: { copy: new_attributes }, headers: valid_headers, as: :json
        copy.reload
        expect(copy.condition_id).to eq(new_condition.id)
        expect(copy.notes).to eq("Updated notes")
      end

      it "renders a JSON response with the copy" do
        copy = Copy.create! valid_attributes
        patch api_v1_collection_items_url(copy),
              params: { copy: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the copy" do
        copy = Copy.create! valid_attributes
        patch api_v1_collection_items_url(copy),
              params: { copy: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_content)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested copy" do
      copy = Copy.create! valid_attributes
      expect {
        delete api_v1_collection_items_urll(copy), headers: valid_headers, as: :json
      }.to change(Copy, :count).by(-1)
    end
  end
end
