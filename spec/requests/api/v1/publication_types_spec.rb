require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "api/v1/publication_types", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # PublicationType. As you add validations to PublicationType, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Comic Book" }
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PublicationTypesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    let!(:publication_type) { create(:publication_type, valid_attributes) }
    it "renders a successful response" do
      get api_v1_publication_types_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    let!(:publication_type) { create(:publication_type, valid_attributes) }
    it "renders a successful response" do
      get api_v1_publication_type_url(publication_type), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new PublicationType" do
        expect {
          post api_v1_publication_types_url,
               params: { publication_type: valid_attributes }, headers: valid_headers, as: :json
        }.to change(PublicationType, :count).by(1)
      end

      it "renders a JSON response with the new publication_type" do
        post api_v1_publication_types_url,
             params: { publication_type: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new PublicationType" do
        expect {
          post api_v1_publication_types_url,
               params: { publication_type: invalid_attributes }, as: :json
        }.to change(PublicationType, :count).by(0)
      end

      it "renders a JSON response with errors for the new publication_type" do
        post api_v1_publication_types_url,
             params: { publication_type: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_content)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let!(:publication_type) { create(:publication_type, valid_attributes) }

      let(:new_attributes) {
        { name: "Magazine" }
      }

      it "updates the requested publication_type" do
        patch api_v1_publication_type_url(publication_type),
              params: { publication_type: new_attributes }, headers: valid_headers, as: :json
        publication_type.reload
        expect(publication_type.name).to eq("Magazine")
      end

      it "renders a JSON response with the publication_type" do
        patch api_v1_publication_type_url(publication_type),
              params: { publication_type: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      let!(:publication_type) { create(:publication_type, valid_attributes) }
      it "renders a JSON response with errors for the publication_type" do
        patch api_v1_publication_type_url(publication_type),
              params: { publication_type: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_content)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:publication_type) { create(:publication_type, valid_attributes) }
    it "destroys the requested publication_type" do
      expect {
        delete api_v1_publication_type_url(publication_type), headers: valid_headers, as: :json
      }.to change(PublicationType, :count).by(-1)
    end
  end
end
