require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/collections", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Collection. As you add validations to Collection, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user, name: "John Doe", email: "john@example.com") }
  let!(:collection) { create(:collection, user_id: user.id, name: 'Initial Collection') }
  let(:app_secret) { ENV['APP_SECRET'] }
  let(:key) { [ app_secret ].pack('H*') } # Decode hex to binary
  let(:nonce) { RbNaCl::Random.random_bytes(RbNaCl::SecretBox.nonce_bytes) }
  let(:message) { user.email }
  let(:box) { RbNaCl::SecretBox.new(key) }
  let(:ciphertext) { box.encrypt(nonce, message) }
  let!(:encrypted_email) { "#{Base64.encode64(nonce).strip}:#{Base64.encode64(ciphertext).strip}" }
  let(:cipher_id) { box.encrypt(nonce, collection.id.to_s) }
  let!(:encrypted_id) { "#{Base64.encode64(nonce).strip}:#{Base64.encode64(cipher_id).strip}" }

  let(:valid_attributes) {
    { user_id: user.id }
  }
  let(:invalid_attributes) {
    { user_id: nil }
  }

  #  This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CollectionsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      get api_v1_user_collections_url(email: encrypted_email), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get api_v1_user_collection_url(email: encrypted_email, id: encrypted_id), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Collection" do
        expect {
          post api_v1_create_user_collection_url(email: encrypted_email),
            params: {
              collection: { name: 'New Collection' }
            },
            headers: valid_headers,
            as: :json
        }.to change(Collection, :count).by(1)
      end

      it "renders a JSON response with the new collection" do
        post api_v1_create_user_collection_url(email: encrypted_email),
             params: {
               collection: { name: 'New Collection' }
             },
             headers: valid_headers,
             as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested collection" do
      expect {
        delete api_v1_delete_user_collection_url(email: encrypted_email, id: encrypted_id), headers: valid_headers, as: :json
      }.to change(Collection, :count).by(-1)
    end
  end
end
